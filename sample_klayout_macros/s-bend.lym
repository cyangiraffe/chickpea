<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This script tests the functions 'paths.s_bend', which generates
# an s-bend path, and 'paths.s_bend_alength', which computes the
# length of the s-bend analytically (as opposed to the segement-
# -by-segment calculation that the DPath.length() method does.

import pya    # Module containing KLayout API
from chickpea import paths          # path/waveguide generating module
from chickpea import my_constants   # personal constants

# For debugging chickpea without exiting KLayout
from importlib import reload
reload(couplers)
reload(paths)

layout = pya.Layout()               # create new layout
top = layout.create_cell("TOP")     # create top-level cell
rib = layout.layer(1, 0)            # create rib waveguide layer

bends = []
lengths = [0, 5, 9, 10, 25, 40, 100]  # x dimension
height = 30                           # y dimension
vectors = [               # displacement vectors so s-bends 
  pya.DVector(-50, 0),    #   aren't on  top of each other
  pya.DVector(-30, 0),
  pya.DVector(-10, 0),
  pya.DVector( 10, 0),
  pya.DVector( 30, 0),
  pya.DVector( 50, 0),
  pya.DVector(-40, -40)
]
  
# Generate s-bends with the horizontal lengths in 'lengths'
for idx, length in enumerate(lengths):
  # Generate the bend
  bends.append(paths.s_bend(layout, rib, length, height, 
    trans=pya.DTrans(vectors[idx]), output='path'))
  # Compute it's length analytically
  analytical_alength = paths.s_bend_alength(length, height)
  # Compute it's length numerically, using KLayout's built-in method
  numerical_alength = bends[idx].length()
  
  # Print the bend parameters and computed arc lengths.
  print('Bend # {}'.format(idx))
  print("Length: {} um".format(length))
  print("Height: {} um".format(height))
  print("Arc length (analytical): {} um".format(analytical_alength))
  print("Arc length (pointwise):  {} um".format(numerical_alength))
  print("analytical - numerical = {} um".format(
    analytical_alength - numerical_alength))
  print('----------------------------------------------------------')

# Insert the bends into the layout
for bend in bends:
  top.shapes(rib).insert(bend)    # Insert the path into the TOP cell

# I have my GDS files output into a folder whose path is contained in
# the variable 'my_constants.gds_models_path', which I set by creating a
# file called 'my_constants' in the 'chickpea' directory. This file doesn't
# come with the cloned version from the github, but you can make your
# own and fill it with personal convenience constants like this one, and
# the Git repo won't track files with the name 'my_constants.py'.
layout.write(my_constants.gds_models_path + "s-bends/test_sbend.gds")</text>
</klayout-macro>
